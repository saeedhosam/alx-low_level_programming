!<arch>
0-isupper.c/    0           0     0     644     225       `
#include "main.h"

/**
 * _isupper - a function that checks for uppercase characters
 * @c: the character that's stored
 * Return: 1 or 0.
*/
int _isupper(int c)
{
	if (c <= 90 && c >= 65)
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     330       `
#include "main.h"
#include <stdio.h>

/**
 * _memset - fills memory with a constant byte
 * @s: points to the memory area
 * @b: constant byte
 * @n: number of bytes to be filled
 *
 * Return: string.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     374       `
#include "main.h"

/**
 * _strcat - a function that concatenates two strings.
 * @dest: the first string
 * @src: the second string that's to be appended
 * Return: a pointer to the resulting string
*/
char *_strcat(char *dest, char *src)
{
	int i, j;

	for (i = 0; dest[i] != '\0';)
		i++;
	for (j = 0; src[j] != '\0'; j++, i++)
	{
		dest[i] = src[j];
	}
	return (dest);
}
1-isdigit.c/    0           0     0     644     207       `
#include "main.h"

/**
 * _isdigit - a function that checks for digits
 * @c: the digit that's stored
 * Return: 1 or 0.
*/
int _isdigit(int c)
{
	if (c <= 57 && c >= 48)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     338       `
#include "main.h"
#include <stdio.h>

/**
 * _memcpy - copies memory area.
 * @dest: memory area copied to
 * @src: memory area copied from
 * @n: number of bytes to be copied
 *
 * Return: string.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}
1-strncat.c/    0           0     0     644     437       `
#include "main.h"

/**
 * _strncat - a function that concatenates two strings.
 * @dest: the first string
 * @src: the second string that's to be appended
 * @n: maximum n bytes to take from src
 * Return: a pointer to the resulting string
*/
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; dest[i] != '\0';)
		i++;
	for (j = 0; j < n; j++, i++)
	{
		if (n > i)
			n = i;
		dest[i] = src[j];
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     418       `
#include "main.h"

/**
 * _atoi - a function that convert a string to an integer.
 * @s: the string converted
 * Return: int.
*/
int _atoi(char *s)
{
	int i, k = 1;
	unsigned int j = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] >= 48 && s[i] <= 57)
		{
			j = j * 10 + (s[i] - '0');
		}
		else if (s[i] == 45)
			k = k * -1;
		else if (s[i] == 43)
			k = k * 1;
		else if (j != 0)
			break;
	}
	return (k * j);
}
2-strchr.c/     0           0     0     644     318       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - locates a character in a string.
 * @s: the string that has the character
 * @c: the character to be located
 *
 * Return: string.
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
		if (s[i] == c)
			return (&s[i]);
	return ('\0');
}
2-strlen.c/     0           0     0     644     224       `
#include "main.h"

/**
 * _strlen - a function that returns the length of a string.
 * @s: the string's characters
 * Return: nothing.
*/
int _strlen(char *s)
{
	int i;

	for (i = 0; *(s + i) != '\0';)
		i++;
	return (i);
}
2-strncpy.c/    0           0     0     644     416       `
#include "main.h"

/**
 * _strncpy - a function that copies a string
 * @dest: the first string
 * @src: the second string that's to be appended
 * @n: maximum n bytes to take from src
 * Return: a pointer to the resulting string
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; src[i] != '\0' && i < n; i++)
		dest[i] = src[i];
	for (j = i; j < n; j++)
		dest[j] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     266       `
#include "main.h"

/**
 * _islower - checks for c is a lowercase character or not.
 * @c: Where the the character stored.
 * Return: 1 if the characteris lowercase and 0 if not.
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     269       `
#include "main.h"

/**
 * _puts - a function that prints a string followed by a new line to stdout
 * @str: the string's characters
 * Return: nothing.
*/
void _puts(char *str)
{
	int i;

	for (i = 0; *(str + i) != '\0'; i++)
		_putchar(*(str + i));
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     376       `
#include "main.h"

/**
 * _strcmp - a function that compares two strings.
 * @s1: string one
 * @s2: string two
 * Return: int.
*/
int _strcmp(char *s1, char *s2)
{
	int i, dif;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			dif = s1[i] - s2[i];
			break;
		}
		else if (s1[i] == s2[i])
		{
			dif = 0;
			continue;
		}
	}
	return (dif);
}
3-strspn.c/     0           0     0     644     455       `
#include "main.h"
#include <stdio.h>

/**
 * _strspn - gets the length of a prefix substring.
 * @s: the string that has initial segment
 * @accept: the bytes
 *
 * Return: string.
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, n;

	for (n = 0; accept[n] != '\0';)
		n++;

	for (i = 0, j = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
			if (s[i] == accept[j])
				break;
		if (j == n)
			break;
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     292       `
#include "main.h"

/**
 * _isalpha - checks for c is a lowercase character or not.
 * @c: Where the the character stored.
 * Return: 1 if the characteris lowercase and 0 if not.
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     434       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: the string to be fetched
 * @accept: what to search for
 *
 * Return: string.
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] >= '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (s[i] == accept[j])
			return (&s[i]);
		else
			return (NULL);
	}
}
5-strstr.c/     0           0     0     644     278       `
#include "main.h"

/**
 * _strstr - converting any number to its absolute.
 * @haystack: Where the number is stored.
 * @needle: Where the number is stored.
 * Return: 1, 0, or -1.
 */
char *_strstr(char *haystack, char *needle)
{
    haystack = needle;
    return(haystack);
}
6-abs.c/        0           0     0     644     194       `
#include "main.h"

/**
 * _abs - converting any number to its absolute.
 * @n: Where the number is stored.
 * Return: 1, 0, or -1.
 */
int _abs(int n)
{
	if (n < 0)
		n = -1 * n;
	return (n);
}
9-strcpy.c/     0           0     0     644     333       `
#include "main.h"

/**
 * _strcpy - a function that copies string by src to buffer by dest
 * @dest: buffer
 * @src: string
 * Return: the pointer to dest.
*/
char *_strcpy(char *dest, char *src)
{
	int i, j;

	for (i = 0; src[i] != '\0';)
		i++;
	i = i + 1;
	for (j = 0; j <= i - 1; j++)
	{
		dest[j] = src[j];
	}
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
